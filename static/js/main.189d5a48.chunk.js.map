{"version":3,"sources":["components/input.js","App.js","serviceWorker.js","index.js"],"names":["InputArea","state","firstname","lastname","email","age","country","editState","editArrayIndex","myArray","handleFirstnameChange","e","target","value","setState","handleLastnameChange","handleEmailChange","handleAgeChange","handleCountryChange","onSubmitChange","preventDefault","editIndexArray","copyArrayEdit","concat","removeItem","deleteIndex","getAttribute","splice","editFiels","editIndex","className","onSubmit","this","onChange","type","required","map","item","index","key","data-itemcount","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.189d5a48.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nimport './input.css';\r\n\r\nexport default class InputArea extends Component {\r\n    \r\n    state = {\r\n        firstname: '',\r\n        lastname: '',\r\n        email: '',\r\n        age: '',\r\n        country: '',\r\n        editState: false,\r\n        editArrayIndex: '' ,\r\n        myArray: []\r\n    }\r\n\r\n    handleFirstnameChange = (e) => {\r\n        const firstname = e.target.value;\r\n        this.setState({ firstname });\r\n    }\r\n    \r\n    handleLastnameChange = (e) => {\r\n        const lastname = e.target.value;\r\n        this.setState({ lastname });\r\n    }\r\n    \r\n    handleEmailChange = (e) => {\r\n        const email = e.target.value;\r\n        this.setState({ email });\r\n    }\r\n    \r\n    handleAgeChange = (e) => {\r\n        const age = e.target.value;\r\n        this.setState({ age });\r\n    }\r\n    \r\n    handleCountryChange = (e) => {\r\n        const country = e.target.value;\r\n        this.setState({ country });\r\n    }\r\n    \r\n    onSubmitChange = (e) => {\r\n        e.preventDefault();\r\n        if(this.state.editState) {\r\n            const editIndexArray = this.state.editArrayIndex;\r\n            const copyArrayEdit = this.state.myArray;\r\n            copyArrayEdit[editIndexArray] = {\r\n                firstname : this.state.firstname ,\r\n                lastname : this.state.lastname ,\r\n                email : this.state.email ,\r\n                age : this.state.age ,\r\n                country : this.state.country\r\n            };\r\n            this.setState({ myArray : copyArrayEdit});\r\n            this.setState( {editState: !this.state.editState} );\r\n            \r\n        }\r\n        else {\r\n            const firstname = this.state.firstname;\r\n            const lastname = this.state.lastname;\r\n            const email = this.state.email;\r\n            const age = this.state.age;\r\n            const country = this.state.country;\r\n            this.setState({\r\n                myArray: this.state.myArray.concat([{\r\n                    firstname: firstname,\r\n                    lastname: lastname,\r\n                    email: email,\r\n                    age: age,\r\n                    country: country\r\n                }])\r\n            })\r\n        }\r\n        this.setState( {\r\n            firstname: '',\r\n            lastname: '',\r\n            email: '',\r\n            age: '',\r\n            country: ''\r\n        } )\r\n    }\r\n    \r\n    removeItem  = (e) => {\r\n        const deleteIndex = e.target.getAttribute('data-itemcount');\r\n        this.state.myArray.splice(deleteIndex, 1)\r\n        this.setState({ myArray: this.state.myArray});\r\n    }\r\n    \r\n    editFiels = (e) => {\r\n        const editIndex = e.target.getAttribute('data-itemcount');\r\n        this.setState( {\r\n            firstname: this.state.myArray[editIndex].firstname,\r\n            lastname: this.state.myArray[editIndex].lastname,\r\n            email: this.state.myArray[editIndex].email,\r\n            age: this.state.myArray[editIndex].age,\r\n            country: this.state.myArray[editIndex].country\r\n        } )\r\n        \r\n        this.setState({ editArrayIndex: editIndex });\r\n        this.setState( {editState: !this.state.editState} );\r\n        \r\n    }\r\n    \r\n    render() {\r\n        return(\r\n            <div className=\"formWrappers\">\r\n            <h1 className=\"headingTop\">React list</h1>\r\n               <div className=\"inputFormCard\">\r\n                 <form onSubmit={this.onSubmitChange}>\r\n                    <div className=\"formField\">\r\n                        <label>First Name:</label>\r\n                        <input value={this.state.firstname} onChange={this.handleFirstnameChange} type=\"text\"  required/>\r\n                    </div>\r\n                    <div className=\"formField\">\r\n                        <label>Last Name:</label>\r\n                        <input value={this.state.lastname} onChange={this.handleLastnameChange} type=\"text\"  required/>\r\n                    </div>\r\n                    <div className=\"formField\">\r\n                        <label>Email:</label>\r\n                        <input value={this.state.email} onChange={this.handleEmailChange} type=\"email\"  required/>\r\n                    </div>\r\n                    <div className=\"formField\">\r\n                        <label>Age:</label>\r\n                        <input value={this.state.age} onChange={this.handleAgeChange} type=\"text\" required/>\r\n                    </div>\r\n                    <div className=\"formField\">\r\n                        <label>Country:</label>\r\n                        <input value={this.state.country} onChange={this.handleCountryChange} type=\"text\" required />\r\n                    </div>\r\n                    <button type=\"Submit\">Submit</button>\r\n                </form>\r\n                </div>\r\n                <ul className=\"listunstyle\">\r\n                   {this.state.myArray.map( (item, index) => (\r\n                        <li  key={index}>\r\n                            <span className=\"w100\"> <strong>Name:</strong>  {item.firstname} {item.lastname} </span>\r\n                            <span className=\"w100\"> <strong>Email:</strong> {item.email} </span>\r\n                            <span className=\"w50\"> <strong>Age:</strong> {item.age} </span>\r\n                            <span className=\"w50\"> <strong>Country:</strong> {item.country} </span>\r\n                            <span className=\"crossBtn\" data-itemcount={index} onClick={this.removeItem} >close</span>\r\n                            <span className=\"editBtn\" data-itemcount={index} onClick={this.editFiels}> Edit </span>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </div>  \r\n        );\r\n    }\r\n}","import React from 'react';\nimport InputArea from './components/input';\n\nfunction App() {\n  return (\n    <div className=\"mainWrapper\">\n        <InputArea />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}